<?php

declare (strict_types= 1);

namespace App\Services;

use App\Models\User;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Hash;

class CreateRoleService
{
    public function __invoke(array $validated)
    {
        $user = User::firstOrCreate(
            ['github_id' => $validated['github_id']],
            [
                'name' => 'AutoGenerated ' . $validated['github_id'],
                'email' => $validated['github_id'] . '@example.com',
                'password' => Hash::make('password'),
            ]
        );
        $authorizedUser = User::where('github_id', $validated['authorized_github_id'])->firstOrFail();

        $roles = ['superadmin' => 4, 'admin' => 3, 'mentor' => 2, 'student' => 1];
        $authorizedLevel = $this->getRoleLevel($authorizedUser, $roles);
        $createLevel = $roles[$validated['role']] ?? 0;

        if ($authorizedLevel == 0 || $createLevel == 0) {
            return response()->json(['message' => 'La peticiÃ³n contiene un rol inexistente.'], 422);
        }
        if ($createLevel >= $authorizedLevel) {
            return response()->json(['message' => 'No puedes crear un rol igual o superior al tuyo.'], 403);
        }

        $user->syncRoles([$validated['role']]);

        return response()->json(['message' => "Se ha creado el Role {$validated['role']} para el github_id {$validated['github_id']}"], 201);
    }

    private function getRoleLevel($user, $roles): int
    {
        foreach ($roles as $role => $level) {
            if ($user->hasRole($role)) {
                return $level;
            }
        }
        return 0;
    }
}
